# 定义阶段
stages:
  - build-image
  - deploy

# 定义全局变量
variables:
  APP_NAME: "XXX"
  APP_VERSION: "0.0.0"
  MODEL_FILE_S3: "s3://basicai-algorithm-model/x.pth"
  IMAGE_NAME: "registry.talos.basic.ai/basicai/algorithm/images/service/${APP_NAME}"
  KUBERNETES_NAMESPACE: "basicai-algorithm"

# 构建镜像
docker-build:
  stage: build-image
  tags:
    - docker
  only:
    - dev
    - test
    - main
    - tags
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    # 需要一个 Docker 服务来构建镜像
    - docker:20-dind
  before_script:
    # 登录公司私有镜像仓库，需在项目或其组上创建一个名为 gitlab-deploy-token 的部署 Token
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - echo $BASICAI_ALGORITHM_AWS_ACCESS_KEY_READ
    - echo $BASICAI_ALGORITHM_AWS_ACCESS_SECRET_READ
    # 替换AWS S3密钥和模型文件地址
    - sed -i 's@${BASICAI_ALGORITHM_AWS_ACCESS_KEY_READ}@'$BASICAI_ALGORITHM_AWS_ACCESS_KEY_READ'@g' Dockerfile
    - sed -i 's@${BASICAI_ALGORITHM_AWS_ACCESS_SECRET_READ}@'$BASICAI_ALGORITHM_AWS_ACCESS_SECRET_READ'@g' Dockerfile
    - sed -i 's@${MODEL_FILE_S3}@'$MODEL_FILE_S3'@g' Dockerfile

  script:
    # 把上次构建的镜像作为缓存来加速构建，同时避免频繁从 Docker Hub 拉取镜像而被阻止
    - docker pull $IMAGE_NAME:latest || true
    - docker build --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:$CI_COMMIT_REF_NAME -t $IMAGE_NAME:$CI_COMMIT_SHORT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_NAME
    - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $IMAGE_NAME:latest

# 各环境公共的部署配置
.kubernetes-deploy:
  stage: deploy
  tags:
    - kubectl

  before_script:
    - cd .cicd/$ENV
    # 替换 Deployment 文件里的各变量为当前值
    - sed -i 's/$APP_NAME/'"$APP_NAME"'/g' deployment.yml
    - sed -i 's/$APP_VERSION/'"$APP_VERSION"'/g' deployment.yml
    # 避免使用 IMAGE_NAME 里的 / 来作为分隔符，否则需要转义
    - sed -i 's|$IMAGE_NAME|'"$IMAGE_NAME"'|g' deployment.yml
    - sed -i 's/$CI_COMMIT_SHORT_SHA/'"$CI_COMMIT_SHORT_SHA"'/g' deployment.yml
    # 替换 configmap 文件里的各变量为当前值，有些环境出于保密考虑没有提交 configmap 文件到代码仓库
    - sed -i 's/$APP_NAME/'"$APP_NAME"'/g' configmap.yml || true


# 开发分支部署到阿里开发环境
kubernetes-deploy-alidev:
  extends: .kubernetes-deploy
  only:
    refs:
      - dev
  variables:
    ENV: alidev
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_ALIYUN_DEVELOPMENT


# 开发分支部署到开发环境
kubernetes-deploy-dev:
  extends: .kubernetes-deploy
  only:
    refs:
      - dev
  variables:
    ENV: dev
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_DEVELOPMENT


# 测试分支部署到阿里测试环境
kubernetes-deploy-alitest:
  extends: .kubernetes-deploy
  only:
    refs:
      - test
  when: manual
  variables:
    ENV: alitest
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_ALIYUN_TESTING


# 测试分支部署到测试环境
kubernetes-deploy-test:
  extends: .kubernetes-deploy
  only:
    refs:
      - test
  when: manual
  variables:
    ENV: test
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_TESTING


# 主分支部署到生产环境，手动执行
kubernetes-deploy-prod:
  extends: .kubernetes-deploy
  only:
    refs:
      - main
  when: manual
  variables:
    ENV: prod
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_PRODUCTION


# 主分支部署到华为云生产环境，手动执行
kubernetes-deploy-hwprod:
  extends: .kubernetes-deploy
  only:
    refs:
      - main
  when: manual
  variables:
    ENV: hwprod
  script:
    # 创建 Kubernetes 部署对象，相关变量请在 GitLab 代码仓库所在 Group 上配置，以免泄密
    - kubectl apply -f configmap.yml -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_HUAWEICLOUD_PRODUCTION
